// Теория компиляторов

// 1_Разбиение на лексемы (Tokenizing/Lexing)
// 2_Парсинг: берет поток (массив) лексем и превращает его в дерево вложенных элементов.("AST" (Abstract Syntax Tree))
// 3_Генерация кода: процесс взятия AST и превращения его в исполняемый код.

//RHS and LHS поиск

// console.log( a );
// Ссылка на a — это RHS-ссылка, потому что здесь ничего не присваивается в a. 
// Напротив, мы выполняем поиск, чтобы извлечь значение a, для того, чтобы передать значение в 
// console.log(..).

// Для сравнения:

// a = 2;

// Ссылка на a здесь — это LHS-ссылка, так как мы не заботимся здесь о том, каково текущее значение, 
// мы просто хотим найти эту переменную как цель для операции присваивания = 2.

//Пример поиска

// function foo(a) {
// 	var b = a;
// 	return a + b;
// }

// var c = foo( 2 );
// Определите все LHS-поиски (их 3!).

// c = .., a = 2 (неявное присваивание параметру) и b = ..

// Определите все RHS-поиски (их 4!).

// foo(2.., = a;, a + .. и .. + b